/*
 * Problem 12
 * Highly divisible triangular number
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 *          1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *     1: 1
 *     3: 1,3
 *     6: 1,2,3,6
 *    10: 1,2,5,10
 *    15: 1,3,5,15
 *    21: 1,3,7,21
 *    28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */
import java.util.ArrayList;

public class _012 {
  // write a function that finds all factors of a given number and returns the count of factors
  public static int countFactors (int num){
    ArrayList<Integer> factors = new ArrayList<Integer> (); // start at 2 because you have to include yourself and 1
    for (int i = 1; i <= num; i++) {
        if (num % i == 0) {
          factors.add(i);
        }
    }
    // if (triangleIdx % 500 == 0 ) System.out.println( factors );
    return factors.size();
  }

  public static void main (String[] args){
    // the logger
    int cap = 500;
    // starting point
    int triangleIdx = 1;
    // triangle number itself
    int triangle = triangleIdx * (triangleIdx + 1) / 2;
    // the number of factors (for logger)
    int factors = countFactors(triangle);

    // generates all triangle numbers until a condition (in a while loop)
    // condition on whether or not the cap for the number of factors has been met
    while (factors < cap) {
      // generate a triangle number
      triangle = triangleIdx * (triangleIdx + 1) / 2;
      // system output for debugging
      if (triangleIdx % 500 == 0 ) System.out.println( String.format("%s\t:%s\t:%s", triangleIdx, triangle, factors ));
      // invoke the countFactors function
      factors = countFactors(triangle);
      // increase index for the next triangle number
      triangleIdx++;
    }
    // output to the system whether or not the
    System.out.println( triangle );
  }
}
